$date
	Sat Jun 13 13:58:30 2020
$end
$version
	Icarus Verilog
$end
$timescale
	10ps
$end
$scope module tb $end
$scope module main_circuit $end
$var wire 1 ! clk $end
$var wire 1 " dmem_we $end
$var wire 1 # reset $end
$var wire 32 $ imem_data [31:0] $end
$var wire 32 % imem_addr [31:0] $end
$var wire 32 & dmem_wdata [31:0] $end
$var wire 32 ' dmem_rdata [31:0] $end
$var wire 32 ( dmem_addr [31:0] $end
$scope module dmem_inst $end
$var wire 1 ! clk $end
$var wire 1 " we $end
$var wire 32 ) wdata [31:0] $end
$var wire 32 * addr [31:0] $end
$var reg 32 + rdata [31:0] $end
$upscope $end
$scope module imem_inst $end
$var wire 8 , addr [7:0] $end
$var reg 32 - data [31:0] $end
$upscope $end
$scope module mips_inst $end
$var wire 1 ! clk $end
$var wire 32 . dmem_rdata [31:0] $end
$var wire 1 " dmem_we $end
$var wire 32 / imem_data [31:0] $end
$var wire 1 # rst $end
$var wire 1 0 reg_write $end
$var wire 1 1 reg_dst $end
$var wire 1 2 mem_write $end
$var wire 1 3 mem_to_reg $end
$var wire 1 4 jump $end
$var wire 32 5 imem_addr [31:0] $end
$var wire 32 6 dmem_wdata [31:0] $end
$var wire 32 7 dmem_addr [31:0] $end
$var wire 1 8 branch $end
$var wire 3 9 alucontrol [2:0] $end
$var wire 1 : alu_src $end
$scope module controller_inst $end
$var wire 32 ; instr [31:0] $end
$var wire 1 0 reg_write $end
$var wire 1 1 reg_dst $end
$var wire 1 2 mem_write $end
$var wire 1 3 mem_to_reg $end
$var wire 1 4 jump $end
$var wire 1 8 branch $end
$var wire 3 < alucontrol [2:0] $end
$var wire 1 : alu_src $end
$scope module aludec_inst $end
$var wire 32 = instr [31:0] $end
$var reg 3 > alucontrol [2:0] $end
$upscope $end
$scope module maindec_inst $end
$var wire 1 : alu_src $end
$var wire 1 8 branch $end
$var wire 32 ? instr [31:0] $end
$var wire 1 @ is_add $end
$var wire 1 A is_and $end
$var wire 1 B is_or $end
$var wire 1 C is_slt $end
$var wire 1 D is_sub $end
$var wire 1 4 jump $end
$var wire 1 3 mem_to_reg $end
$var wire 1 2 mem_write $end
$var wire 1 1 reg_dst $end
$var wire 1 0 reg_write $end
$var wire 6 E opcode [5:0] $end
$var wire 1 F is_sw $end
$var wire 1 G is_lw $end
$var wire 1 H is_j $end
$var wire 1 I is_beq $end
$var wire 1 J is_addi $end
$var wire 6 K func [5:0] $end
$upscope $end
$upscope $end
$scope module datapath_inst $end
$var wire 32 L alu_result [31:0] $end
$var wire 1 : alu_src $end
$var wire 3 M alucontrol [2:0] $end
$var wire 1 8 branch $end
$var wire 1 ! clk $end
$var wire 32 N instr [31:0] $end
$var wire 1 4 jump $end
$var wire 1 3 mem_to_reg $end
$var wire 1 2 mem_write $end
$var wire 1 O pc_src $end
$var wire 32 P read_data [31:0] $end
$var wire 1 1 reg_dst $end
$var wire 1 0 reg_write $end
$var wire 1 # rst $end
$var wire 32 Q src_a [31:0] $end
$var wire 32 R write_data [31:0] $end
$var wire 1 S zero $end
$var wire 5 T write_reg [4:0] $end
$var wire 32 U src_b [31:0] $end
$var wire 6 V rt [5:0] $end
$var wire 32 W result [31:0] $end
$var wire 32 X reg_data2 [31:0] $end
$var wire 32 Y reg_data1 [31:0] $end
$var wire 6 Z rd [5:0] $end
$var wire 32 [ pc_plus_4 [31:0] $end
$var wire 32 \ pc_next [31:0] $end
$var wire 32 ] pc_jump [31:0] $end
$var wire 32 ^ pc_branch [31:0] $end
$var wire 32 _ imm_ext [31:0] $end
$var wire 1 ` c_out $end
$var wire 32 a alu_out [31:0] $end
$var reg 32 b pc [31:0] $end
$scope module alu_inst $end
$var wire 32 c a_in [31:0] $end
$var wire 32 d b_in [31:0] $end
$var wire 3 e f_in [2:0] $end
$var wire 32 f fx00 [31:0] $end
$var wire 32 g fx01 [31:0] $end
$var wire 32 h not_b_in [31:0] $end
$var wire 1 S zero $end
$var wire 32 i y_out [31:0] $end
$var wire 32 j fx11 [31:0] $end
$var wire 32 k fx10 [31:0] $end
$var wire 1 ` c_out $end
$var wire 32 l b_mux_not_b [31:0] $end
$upscope $end
$scope module regfile_inst $end
$var wire 5 m addr1 [4:0] $end
$var wire 5 n addr2 [4:0] $end
$var wire 5 o addr3 [4:0] $end
$var wire 1 ! clk $end
$var wire 1 0 reg_write $end
$var wire 32 p wdata [31:0] $end
$var reg 32 q data1 [31:0] $end
$var reg 32 r data2 [31:0] $end
$upscope $end
$scope module sign_extend_inst $end
$var wire 16 s idata [15:0] $end
$var reg 32 t odata [31:0] $end
$scope begin proc_sign_extend $end
$upscope $end
$upscope $end
$scope begin proc_pc $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx t
bx s
bx r
bx q
bx p
bx o
bx n
bx m
bx l
bx k
b0x j
bx i
bx h
bx g
bx f
bx e
bx d
bx c
bx b
bx a
x`
bx _
bx ^
bx00 ]
bx \
bx [
b0xxxxx Z
bx Y
bx X
bx W
b0xxxxx V
bx U
bx T
xS
bx R
bx Q
bx P
xO
bx N
bx M
bx L
bx K
xJ
xI
xH
xG
xF
bx E
xD
xC
xB
xA
x@
bx ?
bx >
bx =
bx <
bx ;
x:
bx 9
x8
bx 7
bx 6
bx 5
x4
x3
x2
x1
x0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
bx '
bx &
bx %
bx $
1#
z"
0!
$end
#500
01
b0 f
b100 \
b11111111111111111111111111111111 h
b0 l
b0 T
b0 o
b0 U
b0 d
b100 ^
10
1:
0O
0@
0D
0A
0B
0C
b0 &
b0 )
b0 6
b0 R
b0 X
b0 r
b0 _
b0 t
b10 9
b10 <
b10 >
b10 M
b10 e
03
0G
02
0F
08
0I
1J
04
0H
b1000 E
b0 K
b0 V
b0 Z
b1 m
b0 n
b0 s
b100000001000000000000000000000 $
b100000001000000000000000000000 -
b100000001000000000000000000000 /
b100000001000000000000000000000 ;
b100000001000000000000000000000 =
b100000001000000000000000000000 ?
b100000001000000000000000000000 N
b100000000000000000000000 ]
b0 ,
b100 [
b0 %
b0 5
b0 b
1!
#1000
0#
0!
#1500
b1000000000000000000000000 ]
b10 m
b1000 \
b100000010000000000000000000000 $
b100000010000000000000000000000 -
b100000010000000000000000000000 /
b100000010000000000000000000000 ;
b100000010000000000000000000000 =
b100000010000000000000000000000 ?
b100000010000000000000000000000 N
b100 ,
b1000 ^
b1000 [
b100 %
b100 5
b100 b
1!
#2000
0!
#2500
b11000 T
b11000 o
bx &
bx )
bx 6
bx R
bx X
bx r
b10011000000000000000000000 ]
b11000 V
b100 m
b11000 n
b1100 \
b100000100110000000000000000000 $
b100000100110000000000000000000 -
b100000100110000000000000000000 /
b100000100110000000000000000000 ;
b100000100110000000000000000000 =
b100000100110000000000000000000 ?
b100000100110000000000000000000 N
b1000 ,
b1100 ^
b1100 [
b1000 %
b1000 5
b1000 b
1!
#3000
0!
#3500
b100 T
b100 o
b1100100000000000000000000 ]
b100 V
b11 m
b100 n
b10000 \
b100000011001000000000000000000 $
b100000011001000000000000000000 -
b100000011001000000000000000000 /
b100000011001000000000000000000 ;
b100000011001000000000000000000 =
b100000011001000000000000000000 ?
b100000011001000000000000000000 N
b1100 ,
b10000 ^
b10000 [
b1100 %
b1100 5
b1100 b
1!
#4000
0!
#4500
b11111111111111111111111111111xxx g
bx000 f
b111 h
b11111111111111111111111111111000 l
b11000 T
b11000 o
b11111111111111111111111111111000 U
b11111111111111111111111111111000 d
b11111111111111111111111111111000 _
b11111111111111111111111111111000 t
b111000 K
b10111000111111111111100000 ]
b11000 V
b11111 Z
b101 m
b11000 n
b1111111111111000 s
b10100 \
b100000101110001111111111111000 $
b100000101110001111111111111000 -
b100000101110001111111111111000 /
b100000101110001111111111111000 ;
b100000101110001111111111111000 =
b100000101110001111111111111000 ?
b100000101110001111111111111000 N
b10000 ,
b11111111111111111111111111110100 ^
b10100 [
b10000 %
b10000 5
b10000 b
1!
#5000
0!
#5500
bx1xx g
b0x00 f
b11111111111111111111111111111011 h
b100 l
b100 U
b100 d
b100 _
b100 t
b100 K
b101011000000000000000010000 ]
b0 Z
b1010 m
b100 s
b11000 \
b100001010110000000000000000100 $
b100001010110000000000000000100 -
b100001010110000000000000000100 /
b100001010110000000000000000100 ;
b100001010110000000000000000100 =
b100001010110000000000000000100 ?
b100001010110000000000000000100 N
b10100 ,
b101000 ^
b11000 [
b10100 %
b10100 5
b10100 b
1!
#6000
0!
#6500
bx g
bx f
bx h
bx l
0:
00
b11 T
b11 o
bx U
bx d
xO
b10100 _
b10100 t
b110 9
b110 <
b110 >
b110 M
b110 e
18
1I
0J
b100 E
b10100 K
b100011000000000001010000 ]
b11 V
b1 m
b11 n
b10100 s
b0xxx1100 \
b10000001000110000000000010100 $
b10000001000110000000000010100 -
b10000001000110000000000010100 /
b10000001000110000000000010100 ;
b10000001000110000000000010100 =
b10000001000110000000000010100 ?
b10000001000110000000000010100 N
b11000 ,
b1101100 ^
b11100 [
b11000 %
b11000 5
b11000 b
1!
#7000
0!
#7500
bx \
bx0000100011000000000001010000 ]
b0xxx1100 ,
bx ^
bx [
b0xxx1100 %
b0xxx1100 5
b0xxx1100 b
1!
#8000
0!
#8500
bx ,
bx %
bx 5
bx b
1!
#9000
0!
#9500
1!
#10000
0!
#10500
1!
#11000
0!
#11500
1!
#12000
0!
#12500
1!
#13000
0!
#13500
1!
#14000
0!
#14500
1!
#15000
0!
#15500
1!
#16000
0!
#16500
1!
#17000
0!
#17500
1!
#18000
0!
#18500
1!
#19000
0!
#19500
1!
#20000
0!
#20500
1!
#21000
0!
#21500
1!
#22000
0!
#22500
1!
#23000
0!
#23500
1!
#24000
0!
#24500
1!
#25000
0!
#25500
1!
#26000
0!
#26500
1!
#27000
0!
#27500
1!
#28000
0!
#28500
1!
#29000
0!
#29500
1!
#30000
0!
#30500
1!
#31000
0!
#31500
1!
#32000
0!
#32500
1!
#33000
0!
#33500
1!
#34000
0!
#34500
1!
#35000
0!
#35500
1!
#36000
0!
#36500
1!
#37000
0!
#37500
1!
#38000
0!
#38500
1!
#39000
0!
#39500
1!
#40000
0!
#40500
1!
#41000
0!
#41500
1!
#42000
0!
#42500
1!
#43000
0!
#43500
1!
#44000
0!
#44500
1!
#45000
0!
#45500
1!
#46000
0!
#46500
1!
#47000
0!
#47500
1!
#48000
0!
#48500
1!
#49000
0!
#49500
1!
#50000
0!
#50500
1!
#51000
0!
#51500
1!
#52000
0!
#52500
1!
#53000
0!
#53500
1!
#54000
0!
#54500
1!
#55000
0!
#55500
1!
#56000
0!
#56500
1!
#57000
0!
#57500
1!
#58000
0!
#58500
1!
#59000
0!
#59500
1!
#60000
0!
#60500
1!
#61000
0!
#61500
1!
#62000
0!
#62500
1!
#63000
0!
#63500
1!
#64000
0!
#64500
1!
#65000
0!
#65500
1!
#66000
0!
#66500
1!
#67000
0!
#67500
1!
#68000
0!
#68500
1!
#69000
0!
#69500
1!
#70000
0!
#70500
1!
#71000
0!
#71500
1!
#72000
0!
#72500
1!
#73000
0!
#73500
1!
#74000
0!
#74500
1!
#75000
0!
#75500
1!
#76000
0!
#76500
1!
#77000
0!
#77500
1!
#78000
0!
#78500
1!
#79000
0!
#79500
1!
#80000
0!
#80500
1!
#81000
0!
#81500
1!
#82000
0!
#82500
1!
#83000
0!
#83500
1!
#84000
0!
#84500
1!
#85000
0!
#85500
1!
#86000
0!
#86500
1!
#87000
0!
#87500
1!
#88000
0!
#88500
1!
#89000
0!
#89500
1!
#90000
0!
#90500
1!
#91000
0!
#91500
1!
#92000
0!
#92500
1!
#93000
0!
#93500
1!
#94000
0!
#94500
1!
#95000
0!
#95500
1!
#96000
0!
#96500
1!
#97000
0!
#97500
1!
#98000
0!
#98500
1!
#99000
0!
#99500
1!
#100000
0!
#100500
1!
#101000
0!
